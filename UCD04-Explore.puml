@startuml UCD04-Explore
title Use Case Diagram UCD04: Explore

' Primary actor (left)
actor "User" as User

' Secondary actors (right)
actor "Database" as DB <<secondary>>
actor "Map Service" as MapSvc <<secondary>>
actor "Web Server" as WebServer <<secondary>>

' System boundary
rectangle "ChrysaLink - Explore Subsystem" {
  
  ' Generalized use case
  usecase "View Observation(s)" as ViewObs

  ' Specialized use cases (generalization from ViewObs)
  usecase "View in Map\n(UC04)" as ViewMap
  usecase "View in Tile\n(UC05)" as ViewTile
  usecase "View in List\n(UC06)" as ViewList

  ' Search / filter use case
  usecase "Search & Filter\nObservations\n(UC14)" as SearchFilter
}

' Generalization: specialized use cases inherit from ViewObs
ViewMap -|> ViewObs
ViewTile -|> ViewObs
ViewList -|> ViewObs

' Primary actor associations
User --> ViewMap : selects Map view
User --> ViewTile : selects Tile view
User --> ViewList : selects List view
User --> SearchFilter : searches/filters

' Include relationships: views include search/filter results
ViewMap ..> SearchFilter : <<include>>
ViewTile ..> SearchFilter : <<include>>
ViewList ..> SearchFilter : <<include>>

' Secondary actor associations
SearchFilter --> DB : query observations
ViewMap --> MapSvc : request tiles/markers
ViewMap --> DB : fetch geo observations
ViewTile --> DB : fetch thumbnails/metadata
ViewList --> DB : fetch tabular data

' Web server handles requests for all use cases
ViewObs --> WebServer : served by
SearchFilter --> WebServer : served by

' Notes (mapping to code)
note bottom of ViewMap
  Implementation hints:
  - `ExploreMap.tsx` (react-leaflet) renders map and markers
  - `HomePage.tsx` and `ExplorePage.tsx` call functions API to fetch observations
end note

note bottom of SearchFilter
  - Search/Filter endpoint implemented in serverless function
  - Frontend sends queries to `/functions/v1/make-server-b55216b3/species/search` and observations endpoints
end note

@enduml
